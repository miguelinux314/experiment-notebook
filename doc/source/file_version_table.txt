* :class:`enb.isets.BILToBSQ`: Convert raw images (no header) from band-interleaved line order (BIL)     to band-sequential order (BSQ).     
* :class:`enb.isets.BIPToBSQ`: Convert raw images (no header) from band-interleaved pixel order (BIP)     to band-sequential order (BSQ).     
* :class:`enb.isets.DivisibleSizeVersion`: Crop the spatial dimensions of all (raw) images in a directory so that they are     all multiple of a given number. Useful for quickly curating datasets that can be divided     into blocks of a given size.     
* :class:`enb.compression.fits.FITSVersionTable`: Read FITS files and convert them to raw files, sorting them by type (     integer or float) and by bits per pixel.     
* :class:`enb.isets.ImageVersionTable`: Transform all images and save the transformed versions.     
* :class:`enb.compression.jpg.JPEGCurationTable`: Given a directory tree containing JPEG images, copy those images into     a new directory tree in raw BSQ format adding geometry information tags to     the output names recognized by `enb.isets.load_array_bsq`.     
* :class:`enb.compression.png.PDFToPNG`: Take all .pdf files in input dir and save them as .png files into     output_dir, maintining the relative folder structure.     
* :class:`enb.compression.pgm.PGMCurationTable`: Given a directory tree containing PGM images, copy those images into     a new directory tree in raw BSQ format adding geometry information tags to     the output names recognized by `enb.isets.load_array_bsq`.     
* :class:`enb.compression.png.PNGCurationTable`: Given a directory tree containing PNG images, copy those images into     a new directory tree in raw BSQ format adding geometry information tags to     the output names recognized by `load_array_bsq`.     
* :class:`enb.compression.pgm.PPMCurationTable`: Given a directory tree containing PPM images, copy those images into     a new directory tree in raw BSQ format adding geometry information tags to     the output names recognized by `enb.isets.load_array_bsq`.     
* :class:`enb.isets.QuantizedImageVersion`: Apply uniform quantization and store the results.     
* :class:`enb.isets.ReindexedVersion`: Read the N unique (signed or unsigned) sample values in a file,      apply a bijective mapping between the original sample values and      the index values in [0, 1, ..., N-1]. The resulting indices are stored     as unsigned integers using `width_bytes` bytes in the same order as the original samples.          The output files share the name of the originals, except for enb data type name tags     (e.g., u16be, s16le, etc.), which are transformed to u8be, u16be or u32be depending     on the value of `width_bytes`.          In addition to the index data, a second file is created that contains a list of the      unique original sample values as well as the original data type.      This file is needed to reconstruct the original data from the indices,      although no attempt is made at compressing this data.      This second file has the same name as the output index file, with the addition of ".meta"     at the end of it.          
