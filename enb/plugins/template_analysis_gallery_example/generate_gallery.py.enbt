#!/usr/bin/env python3
"""Sample script that generates the different plots used in the gallery.
Code shown in the documentation is taken from this script.
"""
__author__ = "Miguel Hern√°ndez-Cabronero"
__since__ = "2021/02/01"

import os
import pandas as pd
import ast

import enb
from enb.config import options

if __name__ == '__main__':
    iris_df = pd.read_csv("./input_csv/iris_dataset.csv")

    # Scalar numeric analysis
    scalar_analyzer = enb.aanalysis.ScalarNumericAnalyzer()

    for style in enb.plotdata.get_available_styles():
        print(f"Rendering style {repr(style) if style else 'default'}")

        ## One numeric analysis
        analysis_df = scalar_analyzer.get_df(
            full_df=iris_df, target_columns=["sepal_length", "sepal_width", "petal_length", "petal_width"],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "scalar_numeric"),
            style_list=[style])

        ## With grouping
        scalar_analyzer.sort_by_average = True
        analysis_df = scalar_analyzer.get_df(
            full_df=iris_df, target_columns=["sepal_length", "sepal_width", "petal_length", "petal_width"],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "scalar_numeric"),
            group_by="class",
            style_list=[style])

        ## Grouping and individual samples for the boxplot
        scalar_analyzer.show_individual_samples = True
        analysis_df = scalar_analyzer.get_df(
            full_df=iris_df, target_columns=["sepal_length", "sepal_width", "petal_length", "petal_width"],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "scalar_numeric_show_individual"),
            group_by="class", show_grid=True,
            style_list=[style], selected_render_modes={"boxplot"})
        scalar_analyzer.show_individual_samples = False

        # Two numeric analysis

        ## Scatter analysis
        two_numeric_analyzer = enb.aanalysis.TwoNumericAnalyzer()
        analysis_df = two_numeric_analyzer.get_df(
            full_df=iris_df, target_columns=[("sepal_width", "petal_length")],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "two_numeric"),
            style_list=[style]
        )

        ## Scatter analysis with grouping
        two_numeric_analyzer = enb.aanalysis.TwoNumericAnalyzer()
        analysis_df = two_numeric_analyzer.get_df(
            full_df=iris_df, target_columns=[("sepal_width", "petal_length")],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "two_numeric"),
            group_by="class",
            style_list=[style]
        )

        # Scatter analysis with grouping, displaying linear regression
        two_numeric_analyzer = enb.aanalysis.TwoNumericAnalyzer()
        two_numeric_analyzer.show_x_std = False
        two_numeric_analyzer.show_y_std = False
        two_numeric_analyzer.show_linear_regression = True
        analysis_df = two_numeric_analyzer.get_df(
            full_df=iris_df, target_columns=[("sepal_width", "petal_length")],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "two_numeric", "withregression"),
            group_by="class",
            style_list=[style]
        )

        # Dictionary value plotting
        ## Use HEVC mode selection results
        hevc_df = pd.read_csv(os.path.join("./input_csv/hevc_frame_prediction.csv"))
        ## These two lines are automatically applied by get_df of the appropriate experiment - they can be safely ignored
        hevc_df["mode_count"] = hevc_df["mode_count"].apply(ast.literal_eval)
        hevc_df["block_size"] = hevc_df["param_dict"].apply(
            lambda d: f"Block size {ast.literal_eval(d)['block_size']:02d}")

        ## Define some column properties for the mode_count column
        column_to_properties = dict(mode_count=enb.atable.ColumnProperties(
            name="mode_count", label="Mode index to selection count", has_dict_values=True))

        # Create the analyzer and plot results
        numeric_dict_analyzer = enb.aanalysis.DictNumericAnalyzer()
        numeric_dict_analyzer.secondary_alpha = 0
        analysis_df = numeric_dict_analyzer.get_df(
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "numeric_dict"),
            full_df=hevc_df,
            target_columns=["mode_count"],
            group_by="block_size",
            column_to_properties=column_to_properties,
            group_name_order=sorted(hevc_df["block_size"].unique()),

            # Rendering options
            x_tick_label_angle=90,
            fig_width=7.5,
            fig_height=5,
            global_y_label_pos=-0.01,
            style_list=[style])

        # Use a reference group
        # One scalar value
        analysis_df = scalar_analyzer.get_df(
            full_df=iris_df, target_columns=["sepal_length", "sepal_width", "petal_length", "petal_width"],
            group_by="class",
            reference_group="Iris-versicolor",
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "scalar_numeric_reference"),
            style_list=[style]
        )

        ## Two scalar values: scatter and line
        two_numeric_analyzer = enb.aanalysis.TwoNumericAnalyzer()
        analysis_df = two_numeric_analyzer.get_df(
            full_df=iris_df, target_columns=[("sepal_width", "petal_length")],
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "two_numeric_reference"),
            group_by="class", reference_group="Iris-versicolor",
            style_list=[style]
        )

        # Generate combined plots
        scalar_analyzer.get_df(
            full_df=iris_df,
            target_columns=["sepal_length", "sepal_width", "petal_length", "petal_width"],
            group_by="class",
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "scalar_combined_groups"),
            combine_groups=True,
            legend_column_count=3,
            style_list=[style]
        )

        # Generate combined, reference plots
        scalar_analyzer.show_reference_group = False
        scalar_analyzer.get_df(
            full_df=iris_df,
            target_columns=["sepal_length", "sepal_width", "petal_length", "petal_width"],
            group_by="class",
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "scalar_combined_reference"),
            combine_groups=True,
            legend_column_count=3,
            reference_group="Iris-versicolor",
            style_list=[style]
        )

        # Dict with combined groups
        numeric_dict_analyzer = enb.aanalysis.DictNumericAnalyzer()
        numeric_dict_analyzer.secondary_alpha = 0
        analysis_df = numeric_dict_analyzer.get_df(
            output_plot_dir=os.path.join(options.plot_dir, "styles", style, "numeric_dict"),
            full_df=hevc_df,
            target_columns=["mode_count"],
            group_by="block_size",
            column_to_properties=column_to_properties,
            group_name_order=sorted(hevc_df["block_size"].unique()),

            # Rendering options
            x_tick_label_angle=90,
            fig_width=7.5,
            fig_height=5,
            global_y_label_pos=-0.01,
            combine_groups=True,
            style_list=[style])

        # Excercise the 2d scalar analyzer 
        df_2d = pd.read_csv(os.path.join("input_csv", "2d_data_example.csv"))
        sn2da = enb.aanalysis.ScalarNumeric2DAnalyzer()
        sn2da.bin_count = 10
        h2d_column_to_properties = {"value": enb.atable.ColumnProperties("value", label="Result of $f(x,y)$"),
                                    "x": enb.atable.ColumnProperties("x", label="Offset in the $x$ axis"),
                                    "y": enb.atable.ColumnProperties("y", label="Offset in the $y$ axis")}

        # No grouping
        sn2da.get_df(full_df=df_2d,
                     target_columns=[("x", "y", "value")],
                     column_to_properties=h2d_column_to_properties,
                     output_plot_dir=os.path.join(options.plot_dir, "styles", style, "histogram2d"))
        # Group by class
        sn2da.get_df(full_df=df_2d,
                     target_columns=[("x", "y", "value")],
                     column_to_properties=h2d_column_to_properties,
                     group_by="class",
                     output_plot_dir=os.path.join(options.plot_dir, "styles", style, "histogram2d"),
                     fig_height=6,
                     fig_width=5)
        # Group and compare with a reference group
        sn2da.get_df(full_df=df_2d,
                     target_columns=[("x", "y", "value")],
                     column_to_properties=h2d_column_to_properties,
                     group_by="class", reference_group="a",
                     output_plot_dir=os.path.join(options.plot_dir, "styles", style, "histogram2d"),
                     fig_height=6, fig_width=5, show_count=False)

    # Example of style composition
    two_numeric_analyzer = enb.aanalysis.TwoNumericAnalyzer()
    analysis_df = two_numeric_analyzer.get_df(
        full_df=iris_df, target_columns=[("sepal_width", "petal_length")],
        output_plot_dir=os.path.join(options.plot_dir, "styles", "bmh_presentation"),
        style_list=["bmh", "slides"])
